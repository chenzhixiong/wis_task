<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gszh.wis.tsp.dao.TaskJobCronDAO">

    <!--<resultMap id="cronMap" type="com.gszh.wis.tsp.model.TaskJobCron">-->
    <!--<result column="id" property="id" jdbcType="INTEGER" />-->
    <!--<result column="job_name" property="jobName" jdbcType="VARCHAR" />-->
    <!--<result column="job_group" property="jobGroup" jdbcType="VARCHAR" />-->
    <!--<result column="job_ch_name" property="jobChName" jdbcType="VARCHAR" />-->
    <!--<result column="job_file" property="jobFile" jdbcType="VARCHAR" />-->
    <!--<result column="job_class" property="jobClass" jdbcType="VARCHAR" />-->
    <!--<result column="entity_class" property="entityClass" jdbcType="VARCHAR" />-->
    <!--<result column="cron_expression" property="cronExpression" jdbcType="VARCHAR" />-->
    <!--<result column="priority" property="priority" jdbcType="INTEGER" />-->
    <!--<result column="misfire" property="misfire" jdbcType="INTEGER" />-->
    <!--<result column="if_boot" property="ifBoot" jdbcType="INTEGER" />-->
    <!--<result column="is_rely_on" property="isRelyOn" jdbcType="INTEGER" />-->
    <!--<result column="rely_wait_time" property="relyWaitTime" jdbcType="INTEGER" />-->
    <!--<result column="rely_on" property="RelyOn" jdbcType="VARCHAR" />-->
    <!--<result column="start_time" property="startTime" jdbcType="TIMESTAMP" />-->
    <!--<result column="end_time" property="endTime" jdbcType="TIMESTAMP" />-->
    <!--<result column="job_type" property="jobType" jdbcType="VARCHAR" />-->
    <!--<result column="description" property="description" jdbcType="VARCHAR" />-->
    <!--<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />-->
    <!--<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />-->
    <!--<result column="username" property="username" jdbcType="VARCHAR" />-->
    <!--<result column="password" property="password" jdbcType="VARCHAR" />-->
    <!--</resultMap>-->
    <!-- 定时任务操作 -->
    <!-- 获取所有的定时任务 -->
    <select id="getAllCronJob" resultType="com.gszh.wis.tsp.model.TaskJobCron">
        select * from task_job_cron WHERE job_group!="event"
    </select>

    <!-- 获取指定的定时任务 -->
    <select id="getCronJob" parameterType="com.gszh.wis.tsp.model.TaskJobCron"
            resultType="com.gszh.wis.tsp.model.TaskJobCron">
        select * from task_job_cron where job_group!="event"
        <if test="id !=null and id>0">
            AND id=#{id}
        </if>
        <if test="jobName !=null and jobName!=''">
            AND job_name=#{jobName}
        </if>
        <if test="jobGroup !=null and jobGroup!=''">
            AND job_group=#{jobGroup}
        </if>
        <if test="jobClass !=null and jobClass!=''">
            AND job_class=#{jobClass}
        </if>
        <if test="entityClass !=null and entityClass!=''">
            AND entity_class=#{entityClass}
        </if>
        <if test="cronExpression !=null and cronExpression!=''">
            AND cron_expression=#{cronExpression}
        </if>
        <if test="priority !=null and priority>=0">
            AND priority=#{priority}
        </if>
        <if test="misfire !=null and misfire>=0">
            AND misfire=#{misfire}
        </if>
    </select>

    <!-- 插入定时任务配置 -->
    <insert id="insertCronJob" parameterType="com.gszh.wis.tsp.model.TaskJobCron">
        INSERT INTO task_job_cron (
            job_name,
            job_group,
            job_ch_name,
            job_file,
            job_class,
            entity_class,
            cron_expression,
            priority,
            misfire,
            if_boot,
            is_rely_on,
            rely_wait_time,
            rely_on,
            start_time,
            end_time,
            job_type,
            description,
            username,
            password
        )
        VALUES
            (
                #{jobName},
                #{jobGroup},
                #{jobChName},
                #{jobFile},
                #{jobClass},
                #{entityClass},
                #{cronExpression},
                #{priority},
                #{misfire},
                #{ifBoot},
                #{isRelyOn},
                #{relyWaitTime},
                #{relyOn},
                #{startTime},
                #{endTime},
                #{jobType},
                #{description},
                #{username},
                #{password}
            );
    </insert>

    <!-- 更新定时任务配置 -->
    <update id="updateCronJob" parameterType="com.gszh.wis.tsp.model.TaskJobCron">
        UPDATE task_job_cron
        SET
            job_ch_name=#{jobChName},
            job_file=#{jobFile},
            job_class=#{jobClass},
            entity_class=#{entityClass},
            cron_expression=#{cronExpression},
            priority=#{priority},
            misfire=#{misfire},
            if_boot=#{ifBoot},
            is_rely_on=#{isRelyOn},
            rely_wait_time=#{relyWaitTime},
            rely_on=#{relyOn},
            start_time=#{startTime},
            end_time=#{endTime},
            job_type=#{jobType},
            description=#{description}
        WHERE job_group!="event" AND
            job_name=#{jobName} AND
            job_group=#{jobGroup}
	</update>

    <!-- 删除定时任务配置 -->
    <delete id="deleteCronJob" parameterType="com.gszh.wis.tsp.model.TaskJobCron">
        delete from task_job_cron
        WHERE job_group!="event" AND
            job_name=#{jobName} AND
            job_group=#{jobGroup}
    </delete>

    <!-- 存储过程：清空 qrtz_* 的表 -->
    <update id="clearDB">
        call taskscheduler.clear_qrtz()
    </update>


    <!-- 事件任务操作 -->
    <!-- 查询事件任务配置 -->
    <select id="getEvent" parameterType="com.gszh.wis.tsp.model.TaskJobEvent"
            resultType="com.gszh.wis.tsp.model.TaskJobEvent">
        select id,
        job_name,
        job_group,
        job_ch_name,
        job_file,
        job_class,
        entity_class,
        job_type,
        description,
        username,
        password,
        create_time,
        update_time,
        time,
        time_type
        from task_job_cron
        where job_group="event"
        <if test="jobName !=null and jobName!=''">
            AND job_name=#{jobName}
        </if>
    </select>

    <!-- 插入事件任务配置 -->
    <insert id="insertEvent" parameterType="com.gszh.wis.tsp.model.TaskJobEvent">
        INSERT INTO task_job_cron (
        job_name,
        job_group,
        job_ch_name,
        job_file,
        job_class,
        entity_class,
        job_type,
        description,
        username,
        password,
        time,
        time_type
        )
        VALUES
        (
        #{jobName},
        'event',
        #{jobChName},
        #{jobFile},
        #{jobClass},
        #{entityClass},
        #{jobType},
        #{description},
        #{username},
        #{password},
        #{time},
        #{timeType}
        );
    </insert>

    <!-- 更新事件任务配置 -->
    <update id="updateEvent" parameterType="com.gszh.wis.tsp.model.TaskJobEvent">
        UPDATE task_job_cron
        SET
        job_ch_name=#{jobChName},
        job_file=#{jobFile},
        job_class=#{jobClass},
        entity_class=#{entityClass},
        job_type=#{jobType},
        description=#{description},
        time=#{time},
        time_type=#{timeType}
        WHERE job_group="event" AND
        job_name=#{jobName}
    </update>

    <!-- 删除事件任务配置 -->
    <delete id="deleteEvent" parameterType="com.gszh.wis.tsp.model.TaskJobEvent">
        DELETE FROM task_job_cron WHERE job_name=#{jobName} AND job_group="event"
    </delete>
</mapper>